apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization
namespace: argocd
resources:
  - "./argocd-vs.yaml"
  - "./create-client.yaml"
configMapGenerator:
  - name: client-script
    files:
      - "./create-client.sh"

secretGenerator:
  - name: argocd-secret
    type: Opaque
    literals:
      - admin.password=notused
      - oidc.keycloak.clientSecret=hbeT0fKekzgT0fGPMYV6On9cRcSHiU8b
    files:
      - oidc.keycloak.rootCA=secrets/root-ca.pem
generatorOptions:
  disableNameSuffixHash: true
  annotations:
    note: kustomize-generated
helmCharts:
  - name: argo-cd
    releaseName: argocd
    repo: https://argoproj.github.io/argo-helm
    version: 8.1.3
    valuesInline:
      configs:
        cm:
          url: https://argocd.platform.local
          admin.enabled: "false"
          oidc.config: |
            name: keycloak
            issuer: https://kc.platform.local/realms/master
            clientID: argocd
            clientSecret: $oidc.keycloak.clientSecret
            requestedScopes: ["openid", "profile", "email"]
            rootCA: $oidc.keycloak.rootCA
            requestedIDTokenClaims:
              groups:
                essential: true 
          users.anonymous.enabled: "false"
          kustomize.buildOptions: --enable-helm
          application.resourceTrackingMethod: annotation
          resource.exclusions: |
            - apiGroups:
              - "*"
              kinds:
              - ProviderConfigUsage  
          resource.customizations: |
            "*.dsoderlund.consulting/*":
              health.lua: |
                health_status = {
                  status = "Progressing",
                  message = "Provisioning ..."
                }

                local function contains (table, val)
                  for i, v in ipairs(table) do
                    if v == val then
                      return true
                    end
                  end
                  return false
                end

                local has_no_status = {
                  "ProviderConfig",
                  "ProviderConfigUsage"
                }

                if obj.status == nil or next(obj.status) == nil and contains(has_no_status, obj.kind) then
                  health_status.status = "Healthy"
                  health_status.message = "Resource is up-to-date."
                  return health_status
                end

                if obj.status == nil or next(obj.status) == nil or obj.status.conditions == nil then
                  if obj.kind == "ProviderConfig" and obj.status.users ~= nil then
                    health_status.status = "Healthy"
                    health_status.message = "Resource is in use."
                    return health_status
                  end
                  return health_status
                end

                for i, condition in ipairs(obj.status.conditions) do
                  if condition.type == "LastAsyncOperation" then
                    if condition.status == "False" then
                      health_status.status = "Degraded"
                      health_status.message = condition.message
                      return health_status
                    end
                  end

                  if condition.type == "Synced" then
                    if condition.status == "False" then
                      health_status.status = "Degraded"
                      health_status.message = condition.message
                      return health_status
                    end
                  end

                  if condition.type == "Ready" then
                    if condition.status == "True" then
                      health_status.status = "Healthy"
                      health_status.message = "Resource is up-to-date."
                      return health_status
                    end
                  end
                end

                return health_status
            "*.upbound.io/*":
              health.lua: |
                health_status = {
                  status = "Progressing",
                  message = "Provisioning ..."
                }

                local function contains (table, val)
                  for i, v in ipairs(table) do
                    if v == val then
                      return true
                    end
                  end
                  return false
                end

                local has_no_status = {
                  "ProviderConfig",
                  "ProviderConfigUsage"
                }

                if obj.status == nil or next(obj.status) == nil and contains(has_no_status, obj.kind) then
                  health_status.status = "Healthy"
                  health_status.message = "Resource is up-to-date."
                  return health_status
                end

                if obj.status == nil or next(obj.status) == nil or obj.status.conditions == nil then
                  if obj.kind == "ProviderConfig" and obj.status.users ~= nil then
                    health_status.status = "Healthy"
                    health_status.message = "Resource is in use."
                    return health_status
                  end
                  return health_status
                end

                for i, condition in ipairs(obj.status.conditions) do
                  if condition.type == "LastAsyncOperation" then
                    if condition.status == "False" then
                      health_status.status = "Degraded"
                      health_status.message = condition.message
                      return health_status
                    end
                  end

                  if condition.type == "Synced" then
                    if condition.status == "False" then
                      health_status.status = "Degraded"
                      health_status.message = condition.message
                      return health_status
                    end
                  end

                  if condition.type == "Ready" then
                    if condition.status == "True" then
                      health_status.status = "Healthy"
                      health_status.message = "Resource is up-to-date."
                      return health_status
                    end
                  end
                end

                return health_status

            "*.crossplane.io/*":
              health.lua: |
                health_status = {
                  status = "Progressing",
                  message = "Provisioning ..."
                }

                local function contains (table, val)
                  for i, v in ipairs(table) do
                    if v == val then
                      return true
                    end
                  end
                  return false
                end

                local has_no_status = {
                  "Composition",
                  "CompositionRevision",
                  "DeploymentRuntimeConfig",
                  "ProviderConfig",
                  "ProviderConfigUsage"
                }
                if obj.status == nil or next(obj.status) == nil and contains(has_no_status, obj.kind) then
                    health_status.status = "Healthy"
                    health_status.message = "Resource is up-to-date."
                  return health_status
                end

                if obj.status == nil or next(obj.status) == nil or obj.status.conditions == nil then
                  if obj.kind == "ProviderConfig" and obj.status.users ~= nil then
                    health_status.status = "Healthy"
                    health_status.message = "Resource is in use."
                    return health_status
                  end
                  return health_status
                end

                for i, condition in ipairs(obj.status.conditions) do
                  if condition.type == "LastAsyncOperation" then
                    if condition.status == "False" then
                      health_status.status = "Degraded"
                      health_status.message = condition.message
                      return health_status
                    end
                  end

                  if condition.type == "Synced" then
                    if condition.status == "False" then
                      health_status.status = "Degraded"
                      health_status.message = condition.message
                      return health_status
                    end
                  end

                  if contains({"Ready", "Healthy", "Offered", "Established"}, condition.type) then
                    if condition.status == "True" then
                      health_status.status = "Healthy"
                      health_status.message = "Resource is up-to-date."
                      return health_status
                    end
                  end
                end

                return health_status
        rbac:
          policy.csv: |
            g, argocd-admin, role:admin
            g, argocd-viewer, role:readonly
          scopes: '[groups]'
        params:
          server.insecure: true
        secret:
          createSecret: false
        cmp:
          create: true
          plugins:
            cdk8s-typescript:
              init:
                command: ["sh", "-c"]
                args:
                  - >
                    echo "init cdk8s-typescript" &&
                    npm install
              generate:
                command: ["sh", "-c"]
                args:
                  - >
                    cdk8s synth > /dev/null &&
                    cat dist/*
              discover:
                fileName: "./imports/k8s.ts"
      repoServer:
        extraContainers:
          - name: cdk8s-typescript
            command:
              - "/var/run/argocd/argocd-cmp-server"
            image: docker.io/dsoderlund/cdk8s:typescript
            securityContext:
              runAsNonRoot: true
              runAsUser: 999
            volumeMounts:
              - mountPath: /tmp
                name: cmp-tmp
              - mountPath: /var/run/argocd
                name: var-files
              - mountPath: /home/argocd/cmp-server/plugins
                name: plugins
              - mountPath: /home/argocd/cmp-server/config/plugin.yaml
                name: argocd-cmp-cm
                subPath: cdk8s-typescript.yaml
        volumes:
          - name: argocd-cmp-cm
            configMap:
              name: argocd-cmp-cm
          - name: cmp-tmp
            emptyDir: {}
      dex:
        enabled: false
      redisSecretInit:
        enabled: true
        podAnnotations:
          sidecar.istio.io/inject: "false"